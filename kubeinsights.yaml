apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeinsights-sa
  namespace: dkg

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeinsights-clusterrole
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps", "events"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["metrics.k8s.io"]
    resources: ["nodes", "pods"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeinsights-clusterrolebinding
subjects:
  - kind: ServiceAccount
    name: kubeinsights-sa
    namespace: dkg
roleRef:
  kind: ClusterRole
  name: kubeinsights-clusterrole
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeinsights
  namespace: dkg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeinsights
  template:
    metadata:
      labels:
        app: kubeinsights
    spec:
      serviceAccountName: kubeinsights-sa
      initContainers:
      - name: check-pods-ready
        image: bitnami/kubectl
        command:
        - 'sh'
        - '-c'
        - >
          until kubectl get pods kafka-0 -n dkg -o jsonpath='{.status.phase}' | grep Running; do echo waiting for pods; sleep 5; done
      containers:
        - name: kubeinsights
          image: tareqz/kubeinsights:1.1
          env:
            - name: KAFKA_BROKER_URL
              value: "kafka-clusterip.dkg.svc:9092"
            - name: KAFKA_TOPIC
              value: "cluster1"
            - name: KAFKA_GROUP_ID
              value: "foo"
            - name: DATA_DEST
              value: "kafka"


